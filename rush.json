/**
 * This is the main configuration file for Rush.
 * For full documentation, please see https://rushjs.io
 */
{
  "$schema": "https://developer.microsoft.com/json-schemas/rush/v5/rush.schema.json",

  /**
   * (Required) This specifies the version of the Rush engine to be used in this repo.
   * Rush's "version selector" feature ensures that the globally installed tool will
   * behave like this release, regardless of which version is installed globally.
   *
   * The common/scripts/install-run-rush.js automation script also uses this version.
   *
   * NOTE: If you upgrade to a new major version of Rush, you should replace the "v5"
   * path segment in the "$schema" field for all your Rush config files.  This will ensure
   * correct error-underlining and tab-completion for editors such as VS Code.
   */
  "rushVersion": "5.54.0",

  /**
   * The next field selects which package manager should be installed and determines its version.
   * Rush installs its own local copy of the package manager to ensure that your build process
   * is fully isolated from whatever tools are present in the local environment.
   *
   * Specify one of: "pnpmVersion", "npmVersion", or "yarnVersion".  See the Rush documentation
   * for details about these alternatives.
   */
  "pnpmVersion": "6.7.1",

  /**
   * Older releases of the Node.js engine may be missing features required by your system.
   * Other releases may have bugs.  In particular, the "latest" version will not be a
   * Long Term Support (LTS) version and is likely to have regressions.
   *
   * Specify a SemVer range to ensure developers use a Node.js version that is appropriate
   * for your repo.
   *
   * LTS schedule: https://nodejs.org/en/about/releases/
   * LTS versions: https://nodejs.org/en/download/releases/
   */
  "nodeSupportedVersionRange": ">=12.13.0 <13.0.0 || >=14.15.0 <15.0.0",
  /**
   * This feature helps you to review and approve new packages before they are introduced
   * to your monorepo.  For example, you may be concerned about licensing, code quality,
   * performance, or simply accumulating too many libraries with overlapping functionality.
   * The approvals are tracked in two config files "browser-approved-packages.json"
   * and "nonbrowser-approved-packages.json".  See the Rush documentation for details.
   */
 "approvedPackagesPolicy": {
    "reviewCategories": [
      // Some example categories:
      "designPatterns"
    ]

  },
  "projects": [
    {
      "packageName": "@design-patterns/builder",
      "projectFolder": "builder",
      "reviewCategory": "designPatterns"
    },
    {
      "packageName": "@design-patterns/prototype",
      "projectFolder": "prototype",
      "reviewCategory": "designPatterns"
    },
    {
      "packageName": "@design-patterns/flyweight",
      "projectFolder": "flyweight",
      "reviewCategory": "designPatterns"
    },
    {
      "packageName": "@design-patterns/state",
      "projectFolder": "state",
      "reviewCategory": "designPatterns"
    },
    {
      "packageName": "@design-patterns/iterator",
      "projectFolder": "iterator",
      "reviewCategory": "designPatterns"
    },
    {
      "packageName": "@design-patterns/strategy",
      "projectFolder": "strategy",
      "reviewCategory": "designPatterns"
    },
    {
      "packageName": "@design-patterns/memento",
      "projectFolder": "memento",
      "reviewCategory": "designPatterns"
    }
  ]
}
